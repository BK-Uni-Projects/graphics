#Lincoln Lectures On Graphics - 05

#Stepping through glTriangleWhite - again

##Stepping through glTriangleWhite with ApiTrace

- http://apitrace.github.io/

> apitrace consists of a set of tools to:
> - trace OpenGL, OpenGL ES, Direct3D, and DirectDraw APIs calls to a file
> - replay the recorded calls from a file, on any machine and, for OpenGL and OpenGL ES, on any operating system
> - inspect state at any call while replaying
> - view framebuffers and textures
> - view call data
> - edit trace files
> - profile performance of traces

##ApiTrace OS support matrix

| OS      | Trace | CLI | GUI |
|---------|-------|-----|-----|
| Android | yes   |     |     |
| Linux   | yes   | yes | yes |
| OS X    | yes   | yes | yes |
| Windows | yes   | yes | yes |

#Tracing

##Tracing

- ApiTrace records the exact calls that are made to the OpenGL library, and the responses from OpenGL
- It allows us to step through the trace of a program
    - one `gl` call at a time
    - and introspect the `gl` **state** at that point

##Tracing - commands

- record a trace
```bash
apitrace trace bin/3_1_master-debug
```
- open the trace with the GUI
```bash
qapitrace 3_1_master-debug.trace
```

##What are we tracing?

- a moving white triangle on a red background
    - [https://github.com/shearer12345/graphics_examples_in_git_branches/tree/glTraingleWhiteWithApiTrace](https://github.com/shearer12345/graphics_examples_in_git_branches/tree/glTraingleWhiteWithApiTrace)

![3_1_glTraingleWhiteWithApiTrace-debug.trace](assets/apitrace/3_1_glTraingleWhiteWithApiTrace-debug.trace-2014-10-24_12.13.27.gif)

##The actual trace is online, in the glTraingleWhiteWithApiTrace branch

- the [binary trace](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/3_1_glTraingleWhiteWithApiTrace-debug.trace)
- [text version of the trace](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/3_1_glTraingleWhiteWithApiTrace-debug.trace.txt)

#Initial state

##Initialisation

- Frame 0 contained all the stuff the SDL2 and GLEW did for us
    - e.g. setting of the framebuffer details, asking GL for function pointers
    - there's nothing interesting for us here
- We'll start look at Frame 1, which as the first call to **GL** that we've made (that we're interested in)
- At this point the context (the OpenGL state) is almost brand new

##Initial state

- Initially, every variable in the OpenGL state (of **our** context) is set to a default
- There are many variables in the OpenGL state.
- We are interested in only a small subset

##ApiTrace initially, with whole state

- note the thumbnails on the left are from the **end** of each frame

![Screenshot - 241014 - 13:52:28.png](assets/apitrace/Screenshot - 241014 - 13:52:28.png)

##ApiTrace initially, only showing non-default state

- debug is enabled
- we've set the viewport, so viewport and scissor box are set
- our window is 600x600, so the viewport covers the whole window
    - we've set the viewport explicitly, to allow apiTrace to replay properly

![Screenshot - 241014 - 13:52:49.png](assets/apitrace/Screenshot - 241014 - 13:52:49.png)


##Apitrace initially, with an unfilled back buffer (GL_BACK)

- at this point the back buffer hasn't been filled
    - it is just whatever happens to be whatever the GPU has in RAM already in the allocated area
![Screenshot - 241014 - 13:53:20.png](assets/apitrace/Screenshot - 241014 - 13:53:20.png)

##Apitrace initially, with a unfilled back buffer (GL_BACK) - ZOOM

- large view of the back buffer
   - filled with random stuff that's being rendered previously
   - **fun days**

![Screenshot - 241014 - 13:53:58.png](assets/apitrace/Screenshot - 241014 - 13:53:58.png)

##Apitrace initially, with no *uniform* variables set

- initially no *uniform* variables are set

![Screenshot - 241014 - 13:55:19.png](assets/apitrace/Screenshot - 241014 - 13:55:19.png)

#Vertex Shader creation

##glCreateShader (vertex)

- [main.cpp line 158 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L158)
```C++
GLuint shader = glCreateShader(eShaderType);
```

- [glCreateShader](https://www.opengl.org/sdk/docs/man4/html/glCreateShader.xhtml) Creates a shader object
- returns a non-zero value by which it can be referenced

![Screenshot - 241014 - 14:02:20.png](assets/apitrace/Screenshot - 241014 - 14:02:20.png)

##glCreateShader (vertex) - context

- a new (empty) shader with ID=1 now exists in our context
- the shader is empty
- nothing else has changed

TODO - diagram of context, with a new vertex shader, based on ![assets/apitrace/context_draft.jpg](assets/apitrace/context_draft.jpg)

##glShaderSource (vertex)

- [main.cpp line 160 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L160)
```C++
glShaderSource(shader, 1, &strFileData, NULL);
```

- [glShaderSource](https://www.opengl.org/sdk/docs/man4/html/glShaderSource.xhtml) — Replaces the source code in a shader object

![Screenshot - 241014 - 14:08:04.png](assets/apitrace/Screenshot - 241014 - 14:08:04.png)


##glShaderSource (vertex) - context

- the shader with ID=1 is now loaded with source
- nothing else has changed

TODO - diagram of context, with the vertex shader loaded with the source

##glCompileShader (vertex)

- [main.cpp line 162 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L162)
```C++
glCompileShader(shader);
```

- [glCompileShader](https://www.opengl.org/sdk/docs/man4/html/glCompileShader.xhtml) — Compiles a shader object

![Screenshot - 241014 - 14:12:50.png](assets/apitrace/Screenshot - 241014 - 14:12:50.png)


##glCompileShader (vertex) - context

- the shader with ID=1 has now been compiled
- nothing else has changed

TODO - diagram of context, with the vertex shader loaded with the source, and compiled

##glGetShaderiv (vertex)

- [main.cpp line 165 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L165)
```C++
glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
```

- [glGetShaderiv](https://www.opengl.org/sdk/docs/man4/html/glGetShader.xhtml) - returns a parameter from a shader object
- in this case the compile status, which is 1 (=ok)
- nothing has changed in the context, we just queried it
    - queries are **expensive** (relatively) operations

![Screenshot - 241014 - 14:15:55.png](assets/apitrace/Screenshot - 241014 - 14:15:55.png)


#Fragment Shader Creation

##glCreateShader (fragment)

- [main.cpp line 158 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L158)
```C++
GLuint shader = glCreateShader(eShaderType);
```

- [glCreateShader](https://www.opengl.org/sdk/docs/man4/html/glCreateShader.xhtml) — Creates a shader object

![Screenshot - 241014 - 14:20:24.png](assets/apitrace/Screenshot - 241014 - 14:20:24.png)

##glCreateShader (fragment) - context

- a new (empty) shader with ID=2 now exists in our context
- the shader is empty
- nothing else has changed

TODO - diagram of context, with a new fragment shader, based on ![assets/apitrace/context_draft.jpg](assets/apitrace/context_draft.jpg)

__MARKER__ - repeate for fragment below

##glCompileShader (vertex)

- [main.cpp line 162 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L162)
```C++
glCompileShader(shader);
```

- [glCompileShader](https://www.opengl.org/sdk/docs/man4/html/glCompileShader.xhtml) — Compiles a shader object

![Screenshot - 241014 - 14:12:50.png](assets/apitrace/Screenshot - 241014 - 14:12:50.png)


##glCompileShader (vertex) - context

- the shader with ID=1 has now been compiled
- nothing else has changed

TODO - diagram of context, with the vertex shader loaded with the source, and compiled

##glGetShaderiv (vertex)

- [main.cpp line 165 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L165)
```C++
glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
```

- [glGetShaderiv](https://www.opengl.org/sdk/docs/man4/html/glGetShader.xhtml) - returns a parameter from a shader object
- in this case the compile status, which is 1 (=ok)
- nothing has changed in the context, we just queried it
    - queries are **expensive** (relatively) operations

![Screenshot - 241014 - 14:15:55.png](assets/apitrace/Screenshot - 241014 - 14:15:55.png)


##glCreateShader (fragment)

- [main.cpp line 165 in our C++ code](https://github.com/shearer12345/graphics_examples_in_git_branches/blob/glTraingleWhiteWithApiTrace/main.cpp#L165)
```C++
glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
```

- [glCreateShader](https://www.opengl.org/sdk/docs/man4/html/glGetShader.xhtml) - Creates a (empty) shader object
- in this case a fragment shader
- returns a non-zero value by which it can be referenced

![Screenshot - 241014 - 14:20:24.png](assets/apitrace/Screenshot - 241014 - 14:20:24.png)


##glCreateShader (fragment) - context

- the shader with ID=1 has now been compiled
- nothing else has changed

TODO - diagram of context, with the vertex shader loaded with the source, and compiled

