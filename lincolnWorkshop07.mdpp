#Lincoln Graphics Workshop 07 - Transformations Properly

##Transformations Properly

- **Do a fresh clone from the repository**
- You'll be working from glWithGLM and adding features.
    - ```git checkout glWithGLM```
        - as of 2014_11_10, ```master``` points at ```glWithGLM```, but don't count on this for the future
    - then run premake as usual
- If you haven't completed the standard activities from the previous weeks then you should catch up on them
- as a reminder, the source is at
    - [https://github.com/shearer12345/graphics_examples_in_git_branches](https://github.com/shearer12345/graphics_examples_in_git_branches)

##Transformations

- so far you've been doing all the transformations explicitly
    - either in C++ or in GLSL
    - doing additions yourself, or multiplications yourself
- more generally, all these transformations can be represented as a matrix
    - and, in fact, arbitrary combinations of them
- we'll cover details of transformations with matrices in class
    - but there are, as usual, other places to look also
    - https://open.gl/transformations
    - http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/

##Another new library

- to support working with matrices we're going to use GLM
    - the OpenGL Mathematics library
    - http://glm.g-truc.net/0.9.5/index.html
- GLM is a **header only** C++ mathematics library for graphics software
    - based on the OpenGL Shading Language (GLSL) specification
    - that means there is no `.lib` or `.dll` files - everything is built from source
- The GLM library and additions to the premake.lua file are all working in the branch `glWithGLM`

##Activities 1

- Note: some of these activities are already "solved" in exemplar git branches, but you should still to them yourself
- Note2: Do these to a single triangle

1) use GLM to create a **null** matrix, pass it into GLSL and apply it to the triangle

2) create the GLM matrix to a simple translate matrix

3) change the GLM matrix over time to move the triangle over time

4) create the GLM matrix to do a scale

5) change the GLM matrix to do a scale over time

##Activities 2

- still apply this to a triangle

6) create the GLM matrix to do a rotation, around the z-axis

7) change the GLM matrix to do a rotation, around the z-axis, over time

8) change the GLM matrix to do a rotation, around the x-axis, over time

9) change the GLM matrix to do a rotation, around both the x-axis and the z-axis, over time

10) create a GLM matrix to do both a translation and a rotation to the triangle, changing over time

##Stretch Activities

- If you've got through the standard activities then have a bash at these

1) change your triangle into a square.

2) change your triangle into a cube. Make it rotate around the y-axis over time. Does it render correctly all the time? What's going on?

3) enable GL_CULL_FACE ([https://www.opengl.org/sdk/docs/man/docbook4/xhtml/glEnable.xml](https://www.opengl.org/sdk/docs/man/docbook4/xhtml/glEnable.xml)) and apply it to a triangle rotating around the y-axis. What is the effect? How do you control it?

4) enable GL_CULL_FACE ([https://www.opengl.org/sdk/docs/man/docbook4/xhtml/glEnable.xml](https://www.opengl.org/sdk/docs/man/docbook4/xhtml/glEnable.xml)) and apply it to your cube. Does it resolve the issues from 2)? Any other ways to resolve the issue that you can think of?

